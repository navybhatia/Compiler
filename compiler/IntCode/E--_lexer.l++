/*
Please refer the mycode.h file for documentation and design decisions made for this assignment.
*/
%option noyywrap
%option never-interactive

%{
#include "Ast.h"
#include "ParserUtil.h"
#include "E--.tab.h"
#include <iostream>
#include "mycode.h"

using namespace std;


%}
/* Definitions */

DIGIT  [0-9]
DIGIT_S [1-9]
HEX_DIGIT [0-9A-Fa-f]
UINTNUM		   {DIGIT}+
LETTERS [A-Za-z]
ESCAPE_CHARACTERS [abcfnrtv'\\''\'''\"'?x0]


%%
	/*Remove Comments*/

"#".*"\n" {comments();}

	/* Operators */

"->"		{return TOK_ARROW;}
")"                { return TOK_RPAREN; }
"||"               { return TOK_OR;    }
">="               { return TOK_GE;    }
"+"                { return TOK_PLUS;  }
">>"               { return TOK_SHR;   }
"["                { return TOK_LBRACK;}
">"                { return TOK_GT;    }
"\\/"               { return TOK_PAT_OR;}
"**"               { return TOK_PAT_STAR;}
"<"                { return TOK_LT;    }
"~"                { return TOK_BITNOT;}
"("                { return TOK_LPAREN;}
"-"                { return TOK_MINUS; }
"<<"               { return TOK_SHL;   }
"*"                { return TOK_MULT;  }
"/"                { return TOK_DIV;   }
"="                { return TOK_ASSIGN;}
"{"                { return TOK_LBRACE;}
"}"                { return TOK_RBRACE;}
"=="               { return TOK_EQ;    }
"^"                { return TOK_BITXOR;}
"!="               { return TOK_NE;    }
"&"                { return TOK_BITAND;}
":"                { return TOK_COLON; }
"."                { return TOK_DOT;   }
";"                { return TOK_SEMICOLON; }
","                { return TOK_COMMA; }
"<="               { return TOK_LE;   }
"%"                { return TOK_MOD;  }
"!"                { return TOK_NOT;  }
"&&"               { return TOK_AND;  }
"|"               { return TOK_BITOR; }


	/* Basic types */

"event"               { return TOK_EVENT; }
"print"               { return TOK_PRINT; }
"byte"                { return TOK_BYTE; }
"else"                { return TOK_ELSE; }
"string"              { return TOK_STRING; }
"true"                { return TOK_TRUE; }
"bool"                { return TOK_BOOL; }
"int"                 { return TOK_INT; }
"void"                { return TOK_VOID; }
"if"                  { return TOK_IF; }
"any"                 { return TOK_ANY ;}
"class"               { return TOK_CLASS; }
"false"               { return TOK_FALSE; }
"double"              { return TOK_DOUBLE; }
"return"              { return TOK_RETURN; }
"unsigned"		{return TOK_UNSIGNED; }
"while"			{return TOK_WHILE;}
"break"			{return TOK_BREAK;}

	/* Integers */

{DIGIT}+ {return integer();}
"0x"{HEX_DIGIT}+ {return hex_integer();}


	/* Floats */
{DIGIT}*"."{DIGIT}+ |
{DIGIT}+"."{DIGIT}* |
{DIGIT}*"."{DIGIT}+[Ee][+-]?{DIGIT}+ |
{DIGIT}+"."{DIGIT}*[Ee][+-]?{DIGIT}+ {return floats();}


	/*Identifies*/

({LETTERS}|"_")({LETTERS}|"_"|{DIGIT})* {return identifiers();}

	/*Strings*/

("\"")(([^\\"\n]*)|(\\.))*("\"") {if(strings())return TOK_STRCONST;}
("\"")(([^\\"\n]*)|(\\.))*("\n") {print_error_message("String constant cannot span multiple lines");yylinenum++;if(strings())return TOK_STRCONST;}

	/*WhiteSpace*/
" " {}

	/*Newline*/

"\n" {yylinenum++;}
	

 /**************** Unrecognized character ==> error ****************/

. {
	return TOK_LEX_ERROR;
}


%%

